
Процедура ДвижениеПоВзаиморасчетам(Счет, Груз, Сумма)
	
	Движение = Движения.ВзаиморасчетыСКлиентами.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Партнер = Дебитор;
	Движение.РасчетныйДокумент = Счет;
	Движение.ОбъектРасчетов = Груз;
	Движение.Сумма = Сумма;
	
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если ЗадолженностьДебитора.Итог("Сумма") <> ЗадолженностьКредитора.Итог("Сумма") 
		ИЛИ  ЗадолженностьДебитора.Итог("Сумма") <> СуммаВзаимозачета  Тогда
		Сообщить("Задолженность в табличных частях документа и общая сумма взаимозачета должны совпадать!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
//  коммента 1
		
//  коммент - 2
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ВзаиморасчетыСКлиентами Расход
	Движения.ВзаиморасчетыСКлиентами.Записывать = Истина;
	
	МассивСчетов = Новый Массив;
	Для каждого Счет из ЗадолженностьДебитора Цикл
		Если Счет <> Документы.ОказаниеУслуг.ПустаяСсылка() Тогда
			МассивСчетов.Добавить(Счет.РасчетныйДокумент);
		Иначе
			////  добавить движение по пустому счету
			//ДвижениеПоВзаиморасчетам(Счет, Документы.ОформлениеГруза.ПустаяСсылка(), Счет.Сумма);
		КонецЕсли;			
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКлиентамиОстатки.РасчетныйДокумент КАК Счет,
	               |	ВзаиморасчетыСКлиентамиОстатки.ОбъектРасчетов КАК Груз,
	               |	ВзаиморасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКлиентами.Остатки(
	               |			&ДатаДок,
	               |			РасчетныйДокумент В (&МассивДок)
	               |				И Партнер = &Партнер) КАК ВзаиморасчетыСКлиентамиОстатки
	               |ИТОГИ
	               |	СУММА(СуммаОстаток)
	               |ПО
	               |	Счет,
	               |	Груз";
	Запрос.УстановитьПараметр("ДатаДок", Дата);
	Запрос.УстановитьПараметр("МассивДок", МассивСчетов);
	Запрос.УстановитьПараметр("Партнер", Дебитор);
	
	ВыборкаСчет = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		ПлатежПоСчету = ЗадолженностьДебитора.Найти(ВыборкаСчет.Счет, "РасчетныйДокумент").Сумма;
		ОстатокПоСчету = ВыборкаСчет.СуммаОстаток;
		ВыборкаГруз = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		// обход грузов по счету
		Пока ВыборкаГруз.Следующий() Цикл
			 СуммаГруз = ВыборкаГруз.СуммаОстаток;
			 Если СуммаГруз <= ПлатежПоСчету Тогда
				 // движение по грузу
				 ДвижениеПоВзаиморасчетам(ВыборкаСчет.Счет, ВыборкаГруз.Груз, СуммаГруз);
				 ПлатежПоСчету = ПлатежПоСчету - СуммаГруз;
			 Иначе
				 // движение по грузу под остаток
				 ДвижениеПоВзаиморасчетам(ВыборкаСчет.Счет, ВыборкаГруз.Груз, ПлатежПоСчету);
				 ПлатежПоСчету = 0;
				 Прервать;
			 КонецЕсли;   			 
		КонецЦикла;
		Если ПлатежПоСчету > 0 Тогда
		// движение по пустому счету
			ДвижениеПоВзаиморасчетам(Документы.ОказаниеУслуг.ПустаяСсылка(), Документы.ОформлениеГруза.ПустаяСсылка(), ПлатежПоСчету);		
		КонецЕсли;
	КонецЦикла;
	

	//
	//Для Каждого ТекСтрокаЗадолженностьДебитора Из ЗадолженностьДебитора Цикл
	//	Движение = Движения.ВзаиморасчетыСКлиентами.Добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//	Движение.Период = Дата;
	//	Движение.Партнер = Дебитор;
	//	Движение.РасчетныйДокумент = ТекСтрокаЗадолженностьДебитора.РасчетныйДокумент;
	//	Движение.Сумма = ТекСтрокаЗадолженностьДебитора.Сумма;
	//КонецЦикла;

	// регистр ВзаиморасчетыСКлиентами Приход
	Движения.ВзаиморасчетыСКлиентами.Записывать = Истина;
	Для Каждого ТекСтрокаЗадолженностьКредитора Из ЗадолженностьКредитора Цикл
		Движение = Движения.ВзаиморасчетыСКлиентами.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Партнер = Кредитор;
		Движение.РасчетныйДокумент = ТекСтрокаЗадолженностьКредитора.РасчетныйДокумент;
		Движение.Сумма = ТекСтрокаЗадолженностьКредитора.Сумма;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры


